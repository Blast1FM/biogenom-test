// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using biogenom_test.Data.Database;

#nullable disable

namespace biogenom_test.Migrations
{
    [DbContext(typeof(PersonalReportContext))]
    [Migration("20250714031945_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Common.Nutrient", b =>
                {
                    b.Property<Guid>("NutrientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NutrientID");

                    b.ToTable("Nutrients");

                    b.HasData(
                        new
                        {
                            NutrientID = new Guid("d2834471-2a0d-4307-b7e9-a175d129a011"),
                            Name = "Protein",
                            Unit = "Gram"
                        },
                        new
                        {
                            NutrientID = new Guid("e3934471-2a0d-4307-b7e9-a175d129a012"),
                            Name = "Vitamin C",
                            Unit = "Milligram"
                        },
                        new
                        {
                            NutrientID = new Guid("d0e85755-1807-4d51-9edf-dbd110d2c5b2"),
                            Name = "Vitamin D",
                            Unit = "Microgram"
                        },
                        new
                        {
                            NutrientID = new Guid("5cbc1313-698a-46ea-91a4-06cc601e8a16"),
                            Name = "Water",
                            Unit = "Gram"
                        },
                        new
                        {
                            NutrientID = new Guid("43e5a276-4d69-4e6a-a846-43138ff43025"),
                            Name = "Zinc",
                            Unit = "Milligram"
                        });
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Nutrients.CurrentConsumption", b =>
                {
                    b.Property<Guid>("NutrientID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ConsumedAmount")
                        .HasColumnType("numeric");

                    b.HasKey("NutrientID");

                    b.ToTable("CurrentConsumptions");
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Nutrients.RecommendedIntake", b =>
                {
                    b.Property<Guid>("NutrientID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RecommendedAmount")
                        .HasColumnType("numeric");

                    b.HasKey("NutrientID");

                    b.ToTable("RecommendedIntakes");

                    b.HasData(
                        new
                        {
                            NutrientID = new Guid("d2834471-2a0d-4307-b7e9-a175d129a011"),
                            RecommendedAmount = 50m
                        },
                        new
                        {
                            NutrientID = new Guid("e3934471-2a0d-4307-b7e9-a175d129a012"),
                            RecommendedAmount = 90m
                        },
                        new
                        {
                            NutrientID = new Guid("d0e85755-1807-4d51-9edf-dbd110d2c5b2"),
                            RecommendedAmount = 20m
                        },
                        new
                        {
                            NutrientID = new Guid("5cbc1313-698a-46ea-91a4-06cc601e8a16"),
                            RecommendedAmount = 2000m
                        },
                        new
                        {
                            NutrientID = new Guid("43e5a276-4d69-4e6a-a846-43138ff43025"),
                            RecommendedAmount = 11m
                        });
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Supplements.SupplementKit", b =>
                {
                    b.Property<Guid>("KitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("KitID");

                    b.ToTable("SupplementKits");
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Supplements.SupplementKitNutrient", b =>
                {
                    b.Property<Guid>("KitID")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid>("NutrientID")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.HasKey("KitID", "NutrientID");

                    b.HasIndex("NutrientID");

                    b.ToTable("SupplementKitNutrients");
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Nutrients.CurrentConsumption", b =>
                {
                    b.HasOne("biogenom_test.Data.Models.PersonalReport.Common.Nutrient", "Nutrient")
                        .WithOne("CurrentConsumption")
                        .HasForeignKey("biogenom_test.Data.Models.PersonalReport.Nutrients.CurrentConsumption", "NutrientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Nutrients.RecommendedIntake", b =>
                {
                    b.HasOne("biogenom_test.Data.Models.PersonalReport.Common.Nutrient", "Nutrient")
                        .WithOne("RecommendedIntake")
                        .HasForeignKey("biogenom_test.Data.Models.PersonalReport.Nutrients.RecommendedIntake", "NutrientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Supplements.SupplementKitNutrient", b =>
                {
                    b.HasOne("biogenom_test.Data.Models.PersonalReport.Supplements.SupplementKit", "SupplementKit")
                        .WithMany("SupplementKitNutrients")
                        .HasForeignKey("KitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("biogenom_test.Data.Models.PersonalReport.Common.Nutrient", "Nutrient")
                        .WithMany("SupplementKitNutrients")
                        .HasForeignKey("NutrientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");

                    b.Navigation("SupplementKit");
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Common.Nutrient", b =>
                {
                    b.Navigation("CurrentConsumption")
                        .IsRequired();

                    b.Navigation("RecommendedIntake")
                        .IsRequired();

                    b.Navigation("SupplementKitNutrients");
                });

            modelBuilder.Entity("biogenom_test.Data.Models.PersonalReport.Supplements.SupplementKit", b =>
                {
                    b.Navigation("SupplementKitNutrients");
                });
#pragma warning restore 612, 618
        }
    }
}
